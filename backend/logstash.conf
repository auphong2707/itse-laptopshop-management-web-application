input {
  # Track updates for each table
  jdbc {
    jdbc_driver_library => "/usr/share/logstash/postgresql.jar"
    jdbc_driver_class => "org.postgresql.Driver"
    jdbc_connection_string => "jdbc:postgresql://db:5432/postgres"
    jdbc_user => "postgres"
    jdbc_password => "postgres"
    schedule => "* * * * *" 
    statement => "SELECT * FROM laptops WHERE updated_at > NOW() - INTERVAL '2 minute'"
    type => "laptops"
    tracking_column => "updated_at"
    use_column_value => true
    last_run_metadata_path => "/usr/share/logstash/.logstash_jdbc_last_run"
  }

  jdbc {
    jdbc_driver_library => "/usr/share/logstash/postgresql.jar"
    jdbc_driver_class => "org.postgresql.Driver"
    jdbc_connection_string => "jdbc:postgresql://db:5432/postgres"
    jdbc_user => "postgres"
    jdbc_password => "postgres"
    schedule => "* * * * *" 
    statement => "SELECT * FROM reviews WHERE updated_at > NOW() - INTERVAL '2 minute'"
    type => "reviews"
    tracking_column => "updated_at"
    use_column_value => true
    last_run_metadata_path => "/usr/share/logstash/.logstash_jdbc_last_run"
  }

  jdbc {
    jdbc_driver_library => "/usr/share/logstash/postgresql.jar"
    jdbc_driver_class => "org.postgresql.Driver"
    jdbc_connection_string => "jdbc:postgresql://db:5432/postgres"
    jdbc_user => "postgres"
    jdbc_password => "postgres"
    schedule => "* * * * *" 
    statement => "SELECT * FROM newsletter_subscriptions WHERE updated_at > NOW() - INTERVAL '2 minute'"
    type => "newsletter_subscriptions"
    tracking_column => "updated_at"
    use_column_value => true
    last_run_metadata_path => "/usr/share/logstash/.logstash_jdbc_last_run"
  }

  jdbc {
    jdbc_driver_library => "/usr/share/logstash/postgresql.jar"
    jdbc_driver_class => "org.postgresql.Driver"
    jdbc_connection_string => "jdbc:postgresql://db:5432/postgres"
    jdbc_user => "postgres"
    jdbc_password => "postgres"
    schedule => "* * * * *" 
    statement => "SELECT * FROM posts WHERE updated_at > NOW() - INTERVAL '2 minute'"
    type => "posts"
    tracking_column => "updated_at"
    use_column_value => true
    last_run_metadata_path => "/usr/share/logstash/.logstash_jdbc_last_run"
  }

  # Handle deletions using the delete_log table
  jdbc {
    jdbc_driver_library => "/usr/share/logstash/postgresql.jar"
    jdbc_driver_class => "org.postgresql.Driver"
    jdbc_connection_string => "jdbc:postgresql://db:5432/postgres"
    jdbc_user => "postgres"
    jdbc_password => "postgres"
    schedule => "* * * * *"
    statement => "SELECT id, table_name FROM delete_log WHERE deleted_at > NOW() - INTERVAL '2 minute'"
    type => "delete_log"
  }

  # Track updates for orders
  jdbc {
    jdbc_driver_library => "/usr/share/logstash/postgresql.jar"
    jdbc_driver_class => "org.postgresql.Driver"
    jdbc_connection_string => "jdbc:postgresql://db:5432/postgres"
    jdbc_user => "postgres"
    jdbc_password => "postgres"
    schedule => "* * * * *" 
    statement => "
      SELECT 
        o.id as id, 
        o.user_id as user_id, 
        o.total_price as total_price, 
        o.status as status, 
        o.created_at as created_at, 
        o.updated_at as updated_at, 
        COALESCE(json_agg(json_build_object('product_id', oi.product_id, 'quantity', oi.quantity))::text, '[]') AS items
      FROM orders o 
      LEFT JOIN order_items oi ON o.id = oi.order_id 
      WHERE o.updated_at > NOW() - INTERVAL '2 minute'
      GROUP BY o.id
    "
    type => "orders"
  }
}

filter {
  if [type] == "delete_log" and [table_name] and [id] {
    mutate {
      add_field => { "[@metadata][index]" => "%{table_name}" }
      add_field => { "[@metadata][document_id]" => "%{id}" }
      add_field => { "[@metadata][es_action]" => "delete" }
    }
  } else {
    mutate {
      add_field => { "[@metadata][index]" => "%{type}" }
      add_field => { "[@metadata][document_id]" => "%{id}" }
      add_field => { "[@metadata][es_action]" => "index" }
    }
  }
}


output {
  elasticsearch {
    hosts => ["http://elasticsearch:9200"]
    index => "%{[@metadata][index]}"
    document_id => "%{[@metadata][document_id]}"
    action => "%{[@metadata][es_action]}"
  }
  if [type] == "laptops" {
    stdout { codec => json_lines }
  }
}
